
create database air_cargo;
use air_cargo;

show tables;

1. Write a query to create route_details table using suitable data types for the fields,such as route_id,flight_num,origin_airport, destination_airport, aircraft_id, and distance_miles. Implement the check constraint for the flight number and unique constraint for the route_id fields. Also, make sure that the distance miles field is greater than 0. 
 
 create table route_details(
 route_id int not null unique,
 flight_num int,
 origin_airport varchar(11),
 destination_airport varchar(10),
 aircraft_id varchar(20),
 distance_miles int
 check(distance_miles > 0)
 );

2. Write a query to display all the passengers (customers) who have travelled in routes 01 to 25. Take data  from the passengers_on_flights table.

select * from passengers_on_flights;
select * from passengers_on_flights where route_id between 0 and 25 order by route_id;

3. Write a query to identify the number of passengers and total revenue in business class from the ticket_details table.

select * from ticket_details;
select * from ticket_details where class_id in('Bussiness');
select count(class_id) as Count_business_class, sum(price_per_ticket) as total_revenue from ticket_details where class_id in('Bussiness');
select count(class_id),sum(price_per_ticket),class_id from ticket_details 
group by class_id order by sum(price_per_ticket) desc;

4. Write a query to display the full name of the customer by extracting the first name and last name from the customer table.

select * from customer;
select concat(first_name,' ',last_name) as Full_name from customer;

5. Write a query to extract the customers who have registered and booked a ticket. Use data from the customer and ticket_details tables.

select customer.customer_id,customer.first_name,customer.last_name,ticket_details.p_date,ticket_details.class_id from customer
inner join ticket_details 
on customer.customer_id=ticket_details.customer_id order by customer.customer_id;

6. Write a query to identify the customer’s first name and last name based on their customer ID and brand (Emirates) from the ticket_details table.

select customer.customer_id,customer.first_name,customer.last_name,ticket_details.p_date,ticket_details.brand from customer
inner join ticket_details
on customer.customer_id = ticket_details.customer_id
where ticket_details.brand in('Emirates')
order by customer.customer_id;

7. Write a query to identify the customers who have travelled by Economy Plus class using Group By and Having clause on the passengers_on_flights table.

select count(customer_id) as Total_customers,class_id from passengers_on_flights group by class_id 
having class_id in('Economy Plus')
order by Total_customers;

8. Write a query to identify whether the revenue has crossed 10000 using the IF clause on the ticket_details table.

Select sum(price_per_ticket) as Total_revenue, 
if(sum(price_per_ticket)>10000,'Crossed','Not Crossed') as if_crossed_10000
from ticket_details;

9. Write a query to create and grant access to a new user to perform operations on a database.
CREATE USER 'new_user'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON * . * TO 'new_user'@'localhost';

/*NOTE: Using the ALL PRIVILEGES permission type from before will allow all of the permissions listed.
CREATE — enable users to create a database or table
SELECT — permit users to retrieve data
INSERT — let users add new entries in tables
UPDATE — allow users to modify existing entries in tables
DELETE — enable users to erase table entries
DROP — let users delete entire database tables */

10. For changes to take effect immediately flush these privileges by typing in the command:
flush privileges;

GRANT CREATE, SELECT ON * . * TO 'user_name'@'localhost';
REVOKE PERMISSION_TYPE ON database_name.table_name FROM ‘user_name’@‘localhost’;
REVOKE ALL PRIVILEGES ON * . * from 'user_name'@'localhost';
SHOW GRANTS FOR 'user_name'@'localhost';
DROP USER ‘user_name’@‘localhost’;

11. Write a query to find the maximum ticket price for each class using window functions on the ticket_details table.

select customer_id,p_date,class_id,max(price_per_ticket) as maximum_ticket_price
from ticket_details
group by class_id
order by maximum_ticket_price desc;

12. Write a query to extract the passengers whose route ID is 4 by improving the speed and performance of the passengers_on_flights table.

select * from passengers_on_flights where route_id in(4);

13.  For the route ID 4, write a query to view the execution plan of the passengers_on_flights table.
select * from passengers_on_flights where route_id in(4); # query cost - 5.25

14. Write a query to calculate the total price of all tickets booked by a customer across different aircraft IDs using rollup function.

select customer_id,sum(price_per_ticket) as total_price,aircraft_id 
from ticket_details
group by aircraft_id with rollup;

15. Write a query to create a view with only business class customers along with the brand of airlines.
 
 create view business_class_customer as 
 select customer_id,class_id,brand
 from ticket_details
 where class_id in('Bussiness');
 
 alter view business_class_customer as 
 select customer_id,brand
 from ticket_details
 where class_id in('Bussiness');
 
 select * from business_class_customer; # to view table

16. Write a query to create a stored procedure to get the details of all passengers flying between a range of routes defined in run time. Also, return an error message if the table doesn't exist.

DELIMITER &&
CREATE PROCEDURE get_total_passengers()
BEGIN
DECLARE totalpassengers INT DEFAULT 0;
SELECT COUNT(*)
INTO totalpassengers
FROM passengers_on_flights;
SELECT totalpassengers;
END &&
DELIMITER ;

call get_total_passengers();

17 Write a query to create a stored procedure that extracts all the details from the routes table where the travelled distance is more than 2000 miles.

delimiter &&
create procedure get_distance_morethan2kmiles()
begin
select * from routes
where distance_miles > 2000;
end&&

call get_distance_morethan2kmiles();

18. Write a query to create a stored procedure that groups the distance travelled by each flight into three categories. 
 The categories are,
1. short distance travel (SDT) for >=0 AND <= 2000 miles 
2. intermediate distance travel (IDT) for >2000 AND <=6500, 
3. long-distance travel (LDT) for >6500.

delimiter $$
create procedure get_dist_eachflight(
in distance int, out category varchar(25))
begin
SELECT * FROM routes
where distance_miles = distance;
if distance >=0 AND distance <= 2000 then
set category = 'SDT';
elseif distance >2000 AND distance <=6500 then
set category = 'IDT';
else 
set category = 'LDT';
end if; 
end$$

call get_dist_eachflight(21000,@category);
select @category;

19. Write a query to extract ticket purchase date, customer ID, class ID and specify if the complimentary services are provided for the specific class using a stored function in stored procedure on the ticket_details table.
condition: If the class is Business and Economy Plus, then complimentary services are given as Yes, else it is No

delimiter $$ 
create procedure get_complimentaryservices(in class varchar(100), out complimentary_servies varchar(20))
begin
select p_date,customer_id,class_id
from ticket_details
where class_id = class;
if class in('Bussiness' , 'Economy Plus') then 
set complimentary_servies = 'YES';
else 
set complimentary_servies = 'NO';
end if;
end$$

call get_complimentaryservices('Bussiness',@complimentary_servies);
select @complimentary_servies;

20. Write a query to extract the first record of the customer whose last name ends with Scott using a cursor from the customer table.

delimiter $$
create procedure get_lastname_scott()
begin
declare name varchar(10);
declare cur cursor for select first_name from air_cargo.customer 
where last_name = 'scott';
open cur;
fetch cur into name;
select name;
close cur;
end $$

call get_lastname_scott();